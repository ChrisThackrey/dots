// Place your key bindings in this file to override the defaults
[
  // NVIM
  // {
  //   "key": "j",
  //   "command": "list.focusDown",
  //   "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  // },
  // {
  //   "key": "k",
  //   "command": "list.focusUp",
  //   "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  // },
  // {
  //   "key": "ctrl+j",
  //   "command": "selectNextSuggestion",
  //   "when": "editorTextFocus && suggestWidgetMultipleSuggestions && suggestWidgetVisible"
  // },
  // {
  //   "key": "ctrl+k",
  //   "command": "selectPrevSuggestion",
  //   "when": "editorTextFocus && suggestWidgetMultipleSuggestions && suggestWidgetVisible"
  // },
  // {
  //   "key": "tab",
  //   "command": "selectNextSuggestion",
  //   "when": "editorTextFocus && suggestWidgetMultipleSuggestions && suggestWidgetVisible"
  // },
  // {
  //   "key": "tab",
  //   "command": "workbench.action.quickOpenNavigateNext",
  //   "when": "inQuickOpen"
  // },
  // {
  //   "key": "shift+tab",
  //   "command": "selectPrevSuggestion",
  //   "when": "editorTextFocus && suggestWidgetMultipleSuggestions && suggestWidgetVisible"
  // },
  // {
  //   "key": "shift+tab",
  //   "command": "workbench.action.quickOpenNavigatePrevious",
  //   "when": "inQuickOpen"
  // },
  // {
  //   "key": "ctrl+k",
  //   "command": "workbench.action.quickOpenNavigatePrevious",
  //   "when": "inQuickOpen"
  // },
  // {
  //   "key": "enter",
  //   "command": "list.select",
  //   "when": "explorerViewletVisible && filesExplorerFocus"
  // },
  // {
  //   "key": "l",
  //   "command": "list.select",
  //   "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
  // },
  // {
  //   "key": "o",
  //   "command": "list.toggleExpand",
  //   "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
  // },
  // {
  //   "key": "h",
  //   "command": "list.collapse",
  //   "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
  // },
  // {
  //   "key": "a",
  //   "command": "explorer.newFile",
  //   "when": "filesExplorerFocus && !inputFocus"
  // },
  // {
  //   "key": "shift+a",
  //   "command": "explorer.newFolder",
  //   "when": "filesExplorerFocus && !inputFocus"
  // },
  // {
  //   "key": "shift+;",
  //   "command": "insertPrevSuggestion",
  //   "when": "hasOtherSuggestions && textInputFocus && textInputFocus && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'"
  // },
  // {
  //   "key": "ctrl+l",
  //   "command": "workbench.action.focusActiveEditorGroup",
  //   "when": "sideBarFocus"
  // },
  // {
  //   "key": "ctrl+k",
  //   "command": "workbench.action.focusActiveEditorGroup",
  //   "when": "terminalFocus"
  // },
  // {
  //   "key": "ctrl+j",
  //   "command": "-editor.action.insertLineAfter",
  //   "when": "editorTextFocus && neovim.ctrlKeysInsert && !neovim.recording && neovim.mode == 'insert'"
  // },
  // {
  //   "key": "alt+j",
  //   "command": "workbench.action.terminal.focus",
  //   "when": "!terminalFocus"
  // },
  // {
  //   "key": "shift+k",
  //   "command": "editor.action.showHover",
  //   "when": "editorTextFocus && neovim.mode != 'insert'"
  // },
  // {
  //   "key": "ctrl+k ctrl+i",
  //   "command": "-editor.action.showHover",
  //   "when": "editorTextFocus"
  // },
  // {
  //   "key": "shift+tab",
  //   "command": "-acceptAlternativeSelectedSuggestion",
  //   "when": "suggestWidgetVisible && textInputFocus && textInputFocus"
  // },
  // {
  //   "key": "ctrl+f",
  //   "command": "-vscode-neovim.ctrl-f",
  //   "when": "editorTextFocus && neovim.ctrlKeysNormal && neovim.init && neovim.mode != 'insert'"
  // },
  // {
  //   "key": "space",
  //   "command": "whichkey.show",
  //   "when": "neovim.mode != 'insert' && !inputFocus"
  // },
  // Overwrites back to VSC defaults (nvim)
  {
    "key": "ctrl+d",
    "command": "editor.action.addSelectionToNextFindMatch",
    "when": "editorFocus"
  },
  {
    "key": "ctrl+`",
    "command": "workbench.action.terminal.new",
    "when": "terminalProcessSupported"
  },
  {
    "key": "ctrl+shift+`",
    "command": "workbench.action.terminal.toggleTerminal",
    "when": "terminal.active"
  },
  {
    "key": "f2",
    "command": "editor.action.rename",
    "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+shift+/",
    "command": "comment-divider.insertSolidLine",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+alt+/",
    "command": "comment-divider.makeSubHeader",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+shift+e",
    "command": "workbench.view.explorer",
    "when": "viewContainer.workbench.view.explorer.enabled"
  },
  {
    "key": "ctrl+shift+x",
    "command": "workbench.view.extensions",
    "when": "viewContainer.workbench.view.extensions.enabled"
  },
  {
    "key": "ctrl+enter",
    "command": "editor.action.insertLineAfter",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+shift+k",
    "command": "editor.action.deleteLines",
    "when": "textInputFocus && !editorReadonly"
  },
  // Copilot Commands
  // - github.copilot.generate
  // - editor.action.inlineSuggest.commit
  // {
  //   "command": "editor.action.inlineSuggest.trigger",
  //   "key": "alt+\\",
  //   "when": "editorTextFocus && !editorHasSelection && config.github.copilot.inlineSuggest.enable && !inlineSuggestionsVisible"
  // },
  {
    "key": "`",
    "command": "editor.action.inlineSuggest.hide",
    "when": "config.github.copilot.inlineSuggest.enable && !editorHasSelection && inlineSuggestionsVisible"
  },
  // bind CAPSLOCK to ESC in linux:
  // setxkbmap -option caps:swapescape
  {
    "key": "ctrl+\\",
    "command": "editor.action.inlineSuggest.trigger",
    "when": "config.github.copilot.inlineSuggest.enable && editorTextFocus && !editorHasSelection && !inlineSuggestionsVisible"
  },
  {
    "key": "ctrl+shift+\\",
    "command": "editor.action.inlineSuggest.commit",
    "when": "config.github.copilot.inlineSuggest.enable && editorTextFocus && !editorHasSelection && !inlineSuggestionsVisible"
  },
  {
    "key": "alt+\\",
    "command": "github.copilot.generate",
    "when": "config.github.copilot.inlineSuggest.enable && editorTextFocus && !editorHasSelection && !inlineSuggestionsVisible"
  },
  {
    "key": "ctrl+shift+f6",
    "command": "editor.action.inlineSuggest.commit",
    "when": "config.github.copilot.inlineSuggest.enable && editorTextFocus && !editorHasSelection && !inlineSuggestionsVisible"
  },
  {
    "key": "ctrl+shift+[",
    "command": "editor.action.inlineSuggest.showPrevious",
    "when": "config.github.copilot.inlineSuggest.enable && editorTextFocus && !editorHasSelection && !inlineSuggestionsVisible"
  },
  {
    "key": "ctrl+shift+]",
    "command": "editor.action.inlineSuggest.showNext",
    "when": "config.github.copilot.inlineSuggest.enable && editorTextFocus && !editorHasSelection && !inlineSuggestionsVisible"
  },
  {
    "key": "ctrl+shift+alt+f6",
    "command": "github.copilot.replaceRangeWithSolution",
    "when": "config.github.copilot.inlineSuggest.enable && editorTextFocus && !editorHasSelection && !inlineSuggestionsVisible"
  },
  {
    "key": "ctrl+shift+alt+f7",
    "command": "editor.action.inlineSuggest.trigger",
    "when": "config.github.copilot.inlineSuggest.enable && editorTextFocus && !editorHasSelection && !inlineSuggestionsVisible"
  },
  {
    "key": "ctrl+shift+alt+f8",
    "command": "editor.action.inlineSuggest.trigger",
    "when": "config.github.copilot.inlineSuggest.enable && editorTextFocus && !editorHasSelection && !inlineSuggestionsVisible"
  },
  {
    "key": "shift+enter",
    "command": "editor.action.insertSnippet",
    "when": "!editorHasSelection",
    "args": {
      "name": "Split_Tags"
    }
  },
  {
    "key": "alt+a",
    "command": "macros.escapeScope",
    "when": "editorTextFocus"
  },
  {
    "key": "alt+w",
    "command": "macros.escapeScope",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+alt+.",
    "command": "macros.escapeScopeHTML",
    "when": "!editorHasSelection && editorTextFocus"
  },
  // {
  // 	"key": "ctrl+shift+alt+\\",
  // 	"command": "macros.escapeScopeHTMLSingle",
  // 	"when": "!editorHasSelection && editorTextFocus"
  // },
  {
    "key": "shift+ctrl+alt+/",
    "command": "macros.escapeScopeHTMLSingle",
    "when": "!editorHasSelection && editorTextFocus"
  },
  {
    "key": "ctrl+,",
    "command": "macros.escapeScopeComma",
    "when": "!editorHasSelection && editorTextFocus"
  },
  {
    "key": "alt+shift+4",
    "command": "editor.action.insertSnippet",
    "when": "!editorHasSelection",
    "args": {
      "name": "Template Expression"
    }
  },
  {
    "key": "alt+shift+=",
    "command": "editor.action.insertSnippet",
    "when": "!editorHasSelection",
    "args": {
      "name": "Quick Arrow Function Variable Closed-Brackets"
    }
  },
  {
    "key": "ctrl+shift+9",
    "command": "editor.action.insertSnippet",
    "when": "!editorHasSelection",
    "args": {
      "name": "Quick Arrow Function Closed-Brackets"
    }
  },
  {
    "key": "ctrl+alt+9",
    "command": "editor.action.insertSnippet",
    "when": "!editorHasSelection",
    "args": {
      "name": "Quick Arrow Function Variable Closed-Brackets"
    }
  },
  {
    "key": "alt+shift+9",
    "command": "editor.action.insertSnippet",
    "when": "!editorHasSelection",
    "args": {
      "name": "Quick Arrow Function Variable Closed-Brackets"
    }
  },
  {
    "key": "ctrl+shift+alt+9",
    "command": "editor.action.insertSnippet",
    "when": "!editorHasSelection",
    "args": {
      "name": "Quick Arrow Function Full Return"
    }
  },
  {
    "key": "shift+alt+/",
    "command": "editor.action.insertSnippet",
    "when": "!editorHasSelection",
    "args": {
      "name": "Quick Ternary"
    }
  },
  {
    "key": "ctrl+shift+7",
    "command": "editor.action.insertSnippet",
    "when": "!editorHasSelection",
    "args": {
      "name": "Quick And"
    }
  },
  {
    "key": "ctrl+alt+\\",
    "command": "editor.action.insertSnippet",
    "when": "!editorHasSelection",
    "args": {
      "name": "Quick Or"
    }
  },
  {
    "key": "ctrl+shift+space",
    "command": "editor.action.insertSnippet",
    "args": {
      "name": "spaceInPlace"
    }
  },
  {
    "key": "shift+space",
    "command": "editor.action.insertSnippet",
    "args": {
      "name": "openBrackets"
    }
  },
  {
    "key": "ctrl+c",
    "command": "workbench.action.terminal.copySelection",
    "when": "terminalFocus && terminalTextSelected"
  },
  {
    "key": "ctrl+v",
    "command": "workbench.action.terminal.paste",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+x",
    "command": "macros.cutLines",
    "when": "!editorHasSelection"
  },
  {
    "key": "ctrl+c",
    "command": "macros.copyLines",
    "when": "!editorHasSelection"
  },
  { "key": "ctrl+c", "command": "editor.action.clipboardCopyAction" },
  { "key": "ctrl+x", "command": "editor.action.clipboardCutAction" },
  { "key": "shift+insert", "command": "editor.action.clipboardPasteAction" },
  { "key": "ctrl+v", "command": "editor.action.clipboardPasteAction" },
  {
    "key": "ctrl+d",
    "command": "duplicate.execute",
    "when": "explorerViewletVisible && filesExplorerFocus"
  },
  {
    "key": "ctrl+shift+d",
    "command": "duplicate.execute",
    "when": "explorerViewletVisible && filesExplorerFocus"
  },
  {
    "key": "ctrl+shift+w",
    "command": "workbench.files.action.collapseExplorerFolders"
  },
  {
    "key": "ctrl+shift+q",
    "command": "workbench.files.action.collapseExplorerFolders"
  },
  {
    "key": "ctrl+shift+,",
    "command": "macros.Tagify",
    "when": "editorHasSelection"
  },
  {
    "key": "ctrl+shift+,",
    "command": "macros.Tagify2",
    "when": "!editorHasSelection"
  },
  {
    "key": "ctrl+alt+,",
    "command": "editor.action.insertSnippet",
    "when": "!editorHasSelection",
    "args": {
      "name": "Single Tag"
    }
  },
  {
    "key": "ctrl+cmd+,",
    "command": "editor.action.insertSnippet",
    "when": "!editorHasSelection",
    "args": {
      "name": "Single Tag"
    }
  },
  {
    "key": "shift+alt+l",
    "command": "macros.endOfLine",
    "when": "!editorHasSelection"
  },
  {
    "key": "shift+alt+;",
    "command": "macros.endOfLine",
    "when": "!editorHasSelection"
  },
  {
    "key": "ctrl+shift+;",
    "command": "macros.endOfLine",
    "when": "!editorHasSelection"
  },
  {
    "key": "shift+alt+enter",
    "command": "macros.endOfLine",
    "when": "!editorHasSelection"
  },
  {
    "key": "ctrl+shift+'",
    "command": "macros.endOfLine",
    "when": "!editorHasSelection"
  },
  {
    "key": "shift+alt+x",
    "command": "macros.endOfLine",
    "when": "!editorHasSelection"
  },
  {
    "key": "shift+alt+a",
    "command": "editor.action.insertSnippet",
    "when": "!editorHasSelection && resourceExtname != .html",
    "args": {
      "name": "inlineComment"
    }
  },
  {
    "key": "shift+alt+a",
    "command": "editor.action.insertSnippet",
    "when": "!editorHasSelection && resourceExtname == .html",
    "args": {
      "name": "inlineCommentHTML"
    }
  },
  {
    "key": "shift+alt+a",
    "command": "editor.action.insertSnippet",
    "when": "!editorHasSelection && resourceExtname == .css",
    "args": {
      "name": "CSS_Trailing_Comment"
    }
  },
  {
    "key": "shift+alt+a",
    "command": "editor.action.insertSnippet",
    "when": "!editorHasSelection && resourceExtname == .handlebars",
    "args": {
      "name": "Handlebars_Trailing_Comment"
    }
  },
  {
    "key": "shift+alt+a",
    "command": "editor.action.insertSnippet",
    "when": "!editorHasSelection && resourceExtname == .ejs",
    "args": {
      "name": "EJS_Trailing_Comment"
    }
  },
  {
    "key": "shift+alt+down",
    "command": "editor.action.copyLinesDownAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "shift+alt+up",
    "command": "editor.action.copyLinesUpAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "shift+alt+r",
    "command": "region-marker.markRegion",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+up",
    "command": "editor.action.smartSelect.grow",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+up",
    "command": "editor.emmet.action.balanceOut",
    "when": "editorTextFocus && editorLangId == html && editorHasSelection"
  },
  {
    "key": "ctrl+down",
    "command": "editor.action.smartSelect.shrink",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+down",
    "command": "editor.emmet.action.balanceIn",
    "when": "editorTextFocus && editorLangId == html"
  },
  {
    "key": "alt+b",
    "command": "multiCommand.makeRoom"
  },
  {
    "key": "ctrl+;",
    "command": "extension.trailing-semicolon",
    "when": "editorTextFocus"
  },
  {
    "key": "alt+;",
    "command": "extension.trailing-semicolon",
    "when": "editorTextFocus"
  },
  {
    "key": "alt+enter",
    "command": "editor.action.insertLineAfter",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "alt+shift+enter",
    "command": "editor.action.insertLineBefore",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+/",
    "command": "editor.action.commentLine",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "alt+/",
    "command": "metaGo.gotoSmartActive",
    "when": "editorTextFocus"
  },
  // {
  // 	"key": "alt+/",
  // 	"command": "editor.action.insertSnippet",
  // 	"when": "!editorHasSelection && resourceExtname == .ejs",
  // 	"args": {
  // 		"name": "EJS_Comment"
  // 	}
  // },
  {
    "key": "ctrl+e",
    "command": "macros.runPythonInTerminal",
    "when": "editorTextFocus && resourceExtname == .py"
  },
  {
    "key": "ctrl+e",
    "command": "code-runner.run",
    "when": "editorTextFocus && resourceExtname == .js"
  },
  {
    "key": "shift+alt+right",
    "command": "bracket-pair-colorizer.expandBracketSelection",
    "when": "editorTextFocus"
  },
  {
    "key": "shift+alt+left",
    "command": "bracket-pair-colorizer.undoBracketSelection",
    "when": "editorTextFocus"
  },
  {
    "key": "shift+alt+.",
    "command": "editor.emmet.action.wrapWithAbbreviation",
    "when": "editorTextFocus"
  }
]