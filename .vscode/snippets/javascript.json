{
  // Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Print to console": {
    "prefix": "lg",
    "body": ["console.log($1)"],
    "description": "Log output to console"
  },
  "React Function Component": {
    "prefix": "rh",
    "body": [
      "import React from 'react'",
      "",
      "export const $1 = () => {",
      "\t\treturn ($2);",
      "}"
    ],
    "description": "React Function Component"
  },
  "Console Log Line": {
    "prefix": "llogline",
    "body": ["process.stdout.write(String($1));", "// console.log();"],
    "description": "Console Log Line"
  },
  "Console Log Semicolon": {
    "prefix": "clg",
    "body": ["console.log($1);"],
    "description": "Console Log With Semicolon"
  },
  "Console Log No-Semicolon": {
    "prefix": "cll",
    "body": ["console.log($1)"],
    "description": "Console Log With NO Semicolon"
  },
  "Comment On Next Line": {
    "prefix": "cx",
    "body": ["\n// $1"],
    "description": "Begin/continue a comment on the next line"
  },
  "Comment-Break": {
    "prefix": "cxx",
    "body": ["\n//\n// $1"],
    "description": "Begin/continue a comment on the next line"
  },
  "Template Expression": {
    "prefix": "tex",
    "body": "${$1}",
    "description": "Quick template literal expression shortcut"
  },
  "console.log": {
    "prefix": "cl",
    "body": ["console.log($1)"],
    "description": "console.log"
  },
  "className={classnames()}": {
    "prefix": "cc",
    "body": ["className={classnames('$1')}"],
    "description": "tailwind react stuff"
  },
  "className-Jsx": {
    "prefix": "cn",
    "body": "className={$1}",
    "description": "Quick className shortcut"
  },
  "className-Str": {
    "prefix": "cns",
    "body": "className=\"$1\"",
    "description": "Quick className shortcut"
  },
  // "className": {
  // 	"prefix": "cn",
  // 	"body": "className=${1|\"\",{}|}",
  // 	"description": "Quick className shortcut"
  // },
  "Twind": {
    "prefix": "twc",
    "body": ["className={tw`$1`}"],
    "description": "Twind"
  },
  "Single Tag": {
    "prefix": "st",
    "body": "<$1 />",
    "description": "Quick single tag shortcut"
  },
  "Quick Arrow Function": {
    "prefix": "qar",
    "body": "($2) => $3$1",
    "description": "Quick arrow function shortcut"
  },
  "Quick Arrow Function Closed-Brackets": {
    "prefix": "qarcb",
    "body": "($2) => {$3$1}",
    "description": "Quick arrow function shortcut with optional brackets supplied"
  },
  "Quick Arrow Function Async Closed-Brackets": {
    "prefix": "qarcba",
    "body": "async ($2) => {$3$1}",
    "description": "Quick async arrow function shortcut with optional brackets supplied"
  },
  "Quick Arrow Function Full": {
    "prefix": "qarf",
    "body": "($1) => { \n\t$2 \n}",
    "description": "Quick arrow full shortcut"
  },
  "Quick Arrow Function Async": {
    "prefix": "qarfa",
    "body": "async ($1) => { \n\t$2 \n}",
    "description": "Quick arrow async full shortcut"
  },
  "Quick Arrow Function Full Return": {
    "prefix": "qarff",
    "body": "($1) => { \n\treturn $2; \n}",
    "description": "Quick arrow + return statement shortcut"
  },
  "Quick Arrow Function Async Return": {
    "prefix": "qarffa",
    "body": "async ($1) => { \n\treturn $2; \n}",
    "description": "Quick arrow async + return statement shortcut"
  },
  "Quick Arrow Function Variable": {
    "prefix": "qarv",
    "body": " => $1",
    "description": "Quick arrow variable shortcut"
  },
  "Quick Arrow Function Variable Closed-Brackets": {
    "prefix": "qarvcb",
    "body": " => {$1}",
    "description": "Quick arrow variable shortcut with optional brackets supplied"
  },
  "Quick Arrow Function Short": {
    "prefix": "qars",
    "body": "=> $1",
    "description": "Quick arrow short shortcut"
  },
  "Quick Ternary": {
    "prefix": "qtf",
    "body": " ? $2 : $3",
    "description": "Quick ternary shortcut"
  },
  "Quick Ternary Full": {
    "prefix": "qtff",
    "body": "$1 ? $2 : $3",
    "description": "Quick ternary full shortcut"
  },
  "Quick And": {
    "prefix": "qa",
    "body": " && $2",
    "description": "Quick AND shortcut for short-circuit evaluation"
  },
  "Quick And Full": {
    "prefix": "qaf",
    "body": "$1 && $2",
    "description": "Quick AND full shortcut for short-circuit evaluation"
  },
  "Quick Or": {
    "prefix": "qo",
    "body": " || $2",
    "description": "Quick OR shortcut for short-circuit evaluation"
  },
  "Quick Or Full": {
    "prefix": "qof",
    "body": "$1 || $2",
    "description": "Quick OR full shortcut for short-circuit evaluation"
  },
  "Quick Destructure": {
    "prefix": "dest",
    "body": "${1|const,let,var|} ${2|{  },[  ]|} = $3;",
    "description": "Quick shortcut for a destructuring statement"
  },
  "Quick Destructure Array": {
    "prefix": "destarr",
    "body": "const [ $3$1 ] = $2;",
    "description": "Quick shortcut for a destructured array statement"
  },
  "Quick Destructure Object": {
    "prefix": "destobj",
    "body": "const { $3$1 } = $2;",
    "description": "Quick shortcut for a destructured object statement"
  },
  "Route Description": {
    "prefix": "rtdesc",
    "body": [
      "// @desc    ${1:Get all users}\r",
      "// @route   ${2|GET,POST,PUT,DELETE|} /${3:api/users}\r",
      "// @access  ${4|Public,Private|}"
    ],
    "description": "Comment Multi-Line Route Description"
  },
  "jQuery Selector": {
    "prefix": "jq",
    "body": ["$('$1')$2"],
    "description": "jQuery Selector Statement"
  },
  "jQuery Document Ready": {
    "prefix": "jqready",
    "body": ["$(document).ready(function () {\n", "  \n", "}"],
    "description": "jQuery Document Ready Clause"
  },
  "Print Matrix": {
    "prefix": "mtxprint",
    "body": [
      "function printMatrix(matrix) {",
      "  for (let i = 0; i < matrix.length; i++) {",
      "    process.stdout.write(String(matrix[i]));",
      "    console.log();",
      "  }",
      "  console.log();",
      "}"
    ],
    "description": "Print Matrix Line By Line"
  },
  "Type Check Pragma": {
    "prefix": "tscheck",
    "body": "// @ts-check\n",
    "description": "Insert enable-type-checking pragma"
  },
  "Use Strict Pragma": {
    "prefix": "strict",
    "body": "\"use strict\"\n",
    "description": "Insert use-strict pragma"
  },
  "QuerySelector": {
    "prefix": "qs",
    "body": "document.querySelector('$1');",
    "description": "Query Selector Snippet"
  },
  "QuerySelectorAll": {
    "prefix": "qsa",
    "body": "document.querySelectorAll('$1');",
    "description": "Query Selector All Snippet"
  },
  "HTMLClass": {
    "prefix": "hcls",
    "body": "class=\"$1\"",
    "description": "HTML Class Insert Snippet"
  },
  "HTMLId": {
    "prefix": "hid",
    "body": "id=\"$1\"",
    "description": "HTML Id Insert Snippet"
  },
  "HTMLValue": {
    "prefix": "hval",
    "body": "value=\"$1\"",
    "description": "HTML Value Insert Snippet"
  },
  "HTMLPlaceholder": {
    "prefix": "hplac",
    "body": "placeholder=\"$1\"",
    "description": "HTML Placeholder Insert Snippet"
  },
  "Named Function": {
    "prefix": "nfn",
    "body": ["function ${1:functionName}($2) {", "  $3", "}"],
    "description": "Named Function"
  },
  "Anonymous Function": {
    "prefix": "fn",
    "body": ["function() {", "  $2", "}"],
    "description": "Anonymous Function"
  },
  "Arrow Function": {
    "prefix": "arfn",
    "body": ["const ${1:functionName} = ($2) => {", "  $3", "}"],
    "description": "Arrow Function"
  },
  "Basic If Statement": {
    "prefix": "ifc",
    "body": ["if(${1:condition}) {", "  $2", "}"],
    "description": "If Statement"
  },
  "If Else Statement": {
    "prefix": "ifelsec",
    "body": ["if(${1:condition}) {", "  $2", "} else {", "  $3", "}"],
    "description": "If else statement"
  },
  "Array Method": {
    "prefix": "arrmth",
    "body": ["${1|forEach,map,filter,reduce,some|}((${2:item}) => {", "  $3", "})"],
    "description": "Array Method"
  },
  "Axios Request": {
    "prefix": "axreq",
    "body": [
      "axios.${1|get,post,put,delete|}('${2:url}')",
      "  .then(res => console.log(res.data))",
      "  .catch(err => console.log(err));"
    ],
    "description": "Axios Request"
  },
  "Fetch Request": {
    "prefix": "fetchreq",
    "body": [
      "fetch('${1:url}')",
      "  .then(res => res.json())",
      "  .then(data => console.log(data));"
    ],
    "description": "Fetch Request"
  },
  "asfetchreq": {
    "prefix": "Async Await Fetch",
    "body": [
      "const request = async ($1) => {",
      "    const response = await fetch('${2:url}');",
      "    const data = await response.json();",
      "    console.log(data);",
      "}"
    ],
    "description": "Fetch Async/Await"
  },
  "Node Require": {
    "prefix": "ndrq",
    "body": "const ${1:import} = require('${module}');",
    "description": "Require a Node.js module"
  },
  "Express Server": {
    "prefix": "expsrv",
    "body": [
      "const express = require('express');",
      "",
      "const app = express();",
      "",
      "app.${1|get,post,put,delete|}('${2:route}', (req, res) => {",
      "  $3",
      "});",
      "",
      "const PORT = process.env.PORT || ${4|3000,5000,8000,8080|};",
      "",
      "app.listen(PORT, () => console.log(`Server Running On Port ${PORT}`));"
    ],
    "description": "Express Server"
  },
  "Express Route": {
    "prefix": "exprt",
    "body": "app.${1|get,post,put,delete|}('${3:/}', (req, res) => {});",
    "description": "Express Route"
  },
  "Express Init Middleware": {
    "prefix": "exmw",
    "body": "app.use(${1:middleware});",
    "description": "Express Middleware"
  }
}