-- local marks = require("user.marks")
-- local plugins = {
--     -- [https://github.com/LunarVim/Colorschemes]
--     {
--         "lunarvim/colorschemes",
--         branch = "master"
--     },
--     -- [https://github.com/folke/tokyonight.nvim]
--     {
--         "folke/tokyonight.nvim",
--         branch = "main"
--     },
--     -- [https://github.com/jose-elias-alvarez/nvim-lsp-ts-utils]
--     -- [https://github.com/neovim/nvim-lspconfig/blob/master/doc/server_configurations.md#denols]
--     -- {
--     --   "jose-elias-alvarez/nvim-lsp-ts-utils",
--     --   branch = "main",
--     --   requires = {{"nvim-lua/plenary.nvim", opt = true}},
--     --   config = function()
--     --     require("lsp_utils").setup()
--     --   end
--     -- },
--     -- View Vim marks in the sign column [https://github.com/chentau/marks.nvim]
--     {
--         marks.repo,
--         branch = marks.branch,
--         config = marks.config
--     },
--     -- File manager for Neovim powered by nnn  [https://github.com/luukvbaal/nnn.nvim]
--     {
--         "luukvbaal/nnn.nvim",
--         branch = "master",
--         config = function()
--             local builtin = require("nnn").builtin
--             require("nnn").setup {
--                 picker = {
--                     cmd = "tmux new-session nnn -Pp",
--                     style = {border = "rounded"},
--                     session = "shared"
--                 },
--                 replace_netrw = "picker",
--                 window_nav = "<C-l>",
--                 mappings = {
--                     {"<C-t>", builtin.open_in_tab}, -- open file(s) in tab
--                     {"<C-s>", builtin.open_in_split}, -- open file(s) in split
--                     {"<C-v>", builtin.open_in_vsplit}, -- open file(s) in vertical split
--                     {"<C-p>", builtin.open_in_preview}, -- open file in preview split keeping nnn focused
--                     {"<C-y>", builtin.copy_to_clipboard}, -- copy file(s) to clipboard
--                     {"<C-w>", builtin.cd_to_path}, -- cd to file directory
--                     {"<C-e>", builtin.populate_cmdline} -- populate cmdline (:) with file(s)
--                 }
--             }
--         end
--     },
--     -- [https://github.com/github/copilot.vim]
--     {
--         "github/copilot.vim",
--         branch = "release"
--     },
--     -- nvim-cmp source for omnifunc [https://github.com/hrsh7th/cmp-omni]
--     {
--         "hrsh7th/cmp-omni",
--         branch = "main",
--         requires = "hrsh7th/nvim-cmp",
--         event = "InsertEnter"
--     },
--     -- TabNine completion engine for hrsh7th/nvim-cmp [https://github.com/tzachar/cmp-tabnine]
--     {
--         "tzachar/cmp-tabnine",
--         branch = "main",
--         run = "./install.sh",
--         requires = {"hrsh7th/nvim-cmp", "hrsh7th/cmp-omni"},
--         event = "InsertEnter"
--     },
--     -- [https://github.com/hrsh7th/vim-vsnip-integ]
--     -- {
--     -- 	'hrsh7th/vim-vsnip-integ',
--     -- 	branch = 'master',
--     -- 	requires = 'hrsh7th/vim-vsnip',
--     -- },
--     -- [https://github.com/onsails/lspkind-nvim]
--     -- [https://github.com/norcalli/nvim-colorizer.lua]
--     {
--         "norcalli/nvim-colorizer.lua",
--         branch = "master",
--         config = function()
--             require("colorizer").setup(
--                 {"*"},
--                 {
--                     RGB = true, -- #RGB hex codes
--                     RRGGBB = true, -- #RRGGBB hex codes
--                     RRGGBBAA = true, -- #RRGGBBAA hex codes
--                     rgb_fn = true, -- CSS rgb() and rgba() functions
--                     hsl_fn = true, -- CSS hsl() and hsla() functions
--                     css = true, -- Enable all CSS features: rgb_fn, hsl_fn, names, RGB, RRGGBB
--                     css_fn = true -- Enable all CSS *functions*: rgb_fn, hsl_fn
--                 }
--             )
--         end
--     },
--     -- [https://github.com/ThePrimeagen/git-worktree.nvim]
--     {
--         "ThePrimeagen/git-worktree.nvim",
--         branch = "master"
--     },
--     -- HOP, Neovim motions on speed!
--     -- jump anywhere in a document with as few keystrokes as possible  [https://github.com/phaazon/hop.nvim/tree/master]
--     {
--         "phaazon/hop.nvim",
--         branch = "v1.2",
--         event = "BufRead",
--         config = function()
--             require("hop").setup()
--         end
--     },
--     -- [https://github.com/p00f/nvim-ts-rainbow]
--     {
--         "p00f/nvim-ts-rainbow",
--         branch = "master"
--     },
--     -- Use treesitter to autoclose and autorename html tag  [https://github.com/windwp/nvim-ts-autotag]
--     {
--         "windwp/nvim-ts-autotag",
--         branch = "main",
--         event = "InsertEnter",
--         config = function()
--             require("nvim-ts-autotag").setup()
--         end
--     },
--     -- [https://github.com/nvim-telescope/telescope-media-files.nvim]
--     {
--         "nvim-telescope/telescope-media-files.nvim",
--         branch = "master",
--         requires = {
--             "nvim-lua/popup.nvim",
--             "nvim-lua/plenary.nvim",
--             "nvim-telescope/telescope.nvim",
--             "nvim-telescope/telescope-media-files.nvim"
--         },
--         config = function()
--             require("telescope").load_extension "media_files"
--         end
--     },
--     -- [https://github.com/sindrets/diffview.nvim]
--     {
--         "sindrets/diffview.nvim",
--         branch = "main",
--         requires = {
--             {"nvim-lua/plenary.nvim"},
--             {"kyazdani42/nvim-web-devicons", opt = true}
--         },
--         cmd = {
--             "DiffviewOpen",
--             "DiffviewClose",
--             "DiffviewToggleFiles",
--             "DiffviewFocusFiles"
--         },
--         config = function()
--             require("diffview").setup()
--         end
--     },
--     -- [https://github.com/TimUntersberger/neogit]
--     {
--         "TimUntersberger/neogit",
--         branch = "master",
--         requires = "nvim-lua/plenary.nvim",
--         cmd = "Neogit",
--         config = function()
--             require("neogit").setup {integrations = {diffview = true}}
--         end
--     },
--     -- [http://neovimcraft.com/plugin/NTBBloodbath/galaxyline.nvim/index.html]
--     {
--         "NTBBloodbath/galaxyline.nvim", -- 'CosmicNvim/galaxyline.nvim'
--         branch = "main",
--         config = function()
--             require "cosmic.core.statusline"
--         end,
--         -- some optional icons
--         requires = {"kyazdani42/nvim-web-devicons", opt = true}
--     },
--     -- simple, easy-to-use Vim alignment plugin  [https://github.com/junegunn/vim-easy-align]
--     {
--         "junegunn/vim-easy-align",
--         branch = "master",
--         event = "BufReadPost"
--     },
--     -- [https://github.com/sudormrfbin/cheatsheet.nvim]
--     {
--         "sudormrfbin/cheatsheet.nvim",
--         branch = "master",
--         requires = {
--             {"nvim-telescope/telescope.nvim"},
--             {"nvim-lua/popup.nvim"},
--             {"nvim-lua/plenary.nvim"}
--         },
--         config = function()
--             require("cheatsheet").setup {
--                 -- For generic cheatsheets like default, unicode, nerd-fonts, etc
--                 bundled_cheatsheets = {
--                     disabled = {"nerd-fonts", "unicode"}
--                 },
--                 bundled_plugin_cheatsheets = true,
--                 -- For bundled plugin cheatsheets, do not show a sheet if you
--                 -- don't have the plugin installed (searches runtimepath for
--                 -- same directory name)
--                 include_only_installed_plugins = true,
--                 -- Key mappings bound inside the telescope window
--                 telescope_mappings = {
--                     ["<CR>"] = require("cheatsheet.telescope.actions").select_or_execute,
--                     ["<A-CR>"] = require("cheatsheet.telescope.actions").select_or_fill_commandline,
--                     ["<C-Y>"] = require("cheatsheet.telescope.actions").copy_cheat_value,
--                     ["<C-E>"] = require("cheatsheet.telescope.actions").edit_user_cheatsheet
--                 }
--             }
--         end
--     },
--     -- [https://github.com/VonHeikemen/searchbox.nvim]
--     {
--         "VonHeikemen/searchbox.nvim",
--         branch = "main",
--         requires = "MunifTanjim/nui.nvim"
--     },
--     -- [https://github.com/vuki656/package-info.nvim]
--     {
--         "vuki656/package-info.nvim",
--         branch = "master",
--         requires = "MunifTanjim/nui.nvim",
--         config = function()
--             require("package-info").setup()
--         end
--     },
--     -- [https://github.com/lukas-reineke/indent-blankline.nvim]
--     -- context_char_list = "'│', '|', '¦', '┆', '┊', '┃'",
--     {
--         "lukas-reineke/indent-blankline.nvim",
--         branch = "master",
--         event = "BufRead",
--         setup = function()
--             vim.g.indentLine_enabled = 1
--             vim.g.indentLine_char = "┆"
--             vim.g.indentLine_context_char = "┆"
--             vim.g.indent_blankline_space_char_blankline = " "
--             vim.g.indent_blankline_filetype_exclude = {"help", "terminal", "dashboard"}
--             vim.g.indent_blankline_buftype_exclude = {"terminal"}
--             vim.g.indent_blankline_show_trailing_blankline_indent = true
--             vim.g.indent_blankline_show_first_indent_level = false
--             vim.g.indent_blankline_use_treesitter = true
--             vim.g.indent_blankline_show_foldtext = true
--             vim.g.indent_blankline_show_current_context = true
--             vim.g.indent_blankline_show_current_context_start = true
--             vim.g.indent_blankline_show_current_context_start_on_current_line = true
--             vim.g.indent_blankline_viewport_buffer = 200
--             vim.g.indent_blankline_indent_level = 20
--         end
--     },
--     -- [https://github.com/tpope/vim-sleuth]
--     -- basic support for .env and Procfile  [https://github.com/tpope/vim-dotenv]
--     {
--         "tpope/vim-dotenv",
--         branch = "master"
--     },
--     -- mappings for bracket chars "[" "]" [https://github.com/tpope/vim-unimpaired]
--     {
--         "tpope/vim-unimpaired",
--         branch = "master"
--     },
--     -- mappings to delete, change and add surroundings  [https://github.com/tpope/vim-surround]
--     {
--         "tpope/vim-surround",
--         branch = "master"
--     },
--     -- enable repeating supported plugin maps with "."  [https://github.com/tpope/vim-repeat]
--     {
--         "tpope/vim-repeat",
--         branch = "master"
--     },
--     -- [https://github.com/alvan/vim-closetag]
--     {
--         "alvan/vim-closetag",
--         branch = "master"
--     },
--     -- Ranger file explorer plugin  [https://github.com/kevinhwang91/rnvimr]
--     {
--         "kevinhwang91/rnvimr",
--         branch = "main",
--         cmd = "RnvimrToggle",
--         config = function()
--             vim.g.rnvimr_draw_border = 1
--             vim.g.rnvimr_pick_enable = 1
--             vim.g.rnvimr_bw_enable = 1
--             vim.g.rnvimr_enable_ex = 1
--             vim.g.rnvimr_edit_cmd = "drop"
--             vim.g.rnvimr_hide_gitignore = 1
--             vim.g.rnvimr_enable_bw = 1
--             vim.g.rnvimr_ranger_cmd =
--                 'ranger --cmd "set preview_images=1 set draw_borders both"'
--         end
--     },
--     -- Moving and duplicating blocks and lines  [https://github.com/booperlv/nvim-gomove]
--     {
--         "booperlv/nvim-gomove",
--         branch = "main",
--         config = function()
--             require("gomove").setup {
--                 -- whether or not to map default key bindings, (true/false)
--                 map_defaults = true,
--                 -- what method to use for reindenting, ("vim-move" / "simple" / ("none"/nil))
--                 reindent_mode = "vim-move",
--                 -- whether to not to move past line when moving blocks horizontally, (true/false)
--                 move_past_line = false,
--                 -- whether or not to ignore indent when duplicating lines horizontally, (true/false)
--                 ignore_indent_lh_dup = true
--             }
--         end
--     },
--     -- Multiple cursors like VSCode  [https://github.com/mg979/vim-visual-multi]
--     {
--         "mg979/vim-visual-multi",
--         branch = "master"
--     },
--     -- Smooth scrolling  [https://github.com/karb94/neoscroll.nvim]
--     {
--         "karb94/neoscroll.nvim",
--         branch = "master",
--         event = "WinScrolled",
--         config = function()
--             require("neoscroll").setup(
--                 {
--                     -- All these keys will be mapped to their corresponding default scrolling animation
--                     mappings = {
--                         "<C-u>",
--                         "<C-d>",
--                         "<C-b>",
--                         "<C-f>",
--                         "<C-y>",
--                         "<C-e>",
--                         "zt",
--                         "zz",
--                         "zb"
--                     },
--                     hide_cursor = true, -- Hide cursor while scrolling
--                     stop_eof = true, -- Stop at <EOF> when scrolling downwards
--                     use_local_scrolloff = false, -- Use the local scope of scrolloff instead of the global scope
--                     respect_scrolloff = false, -- Stop scrolling when the cursor reaches the scrolloff margin of the file
--                     cursor_scrolls_alone = true, -- The cursor will keep on scrolling even if the window cannot scroll further
--                     easing_function = nil, -- Default easing function
--                     pre_hook = nil, -- Function to run before the scrolling animation starts
--                     post_hook = nil -- Function to run after the scrolling animation ends
--                 }
--             )
--         end
--     },
--     -- Minimap Plugin  [https://github.com/severin-lemaignan/vim-minimap.vim]
--     {
--         "severin-lemaignan/vim-minimap",
--         branch = "master",
--         run = "cargo install --locked code-minimap",
--         cmd = {
--             "Minimap",
--             "MinimapClose",
--             "MinimapToggle",
--             "MinimapRefresh",
--             "MinimapUpdateHighlight"
--         },
--         config = function()
--             vim.cmd("let g:minimap_width = 10")
--             vim.cmd("let g:minimap_auto_start = 1")
--             vim.cmd("let g:minimap_auto_start_win_enter = 1")
--         end
--     },
--     -- [https://github.com/tpope/vim-commentary]
--     {
--         "tpope/vim-commentary",
--         branch = "master"
--     },
--     -- [https://github.com/RRethy/vim-illuminate]
--     {
--         "RRethy/vim-illuminate",
--         branch = "master"
--     },
--     -- [https://github.com/weilbith/nvim-code-action-menu]
--     {
--         "weilbith/nvim-code-action-menu",
--         branch = "main",
--         cmd = "CodeActionMenu"
--     },
--     -- [https://github.com/kosayoda/nvim-lightbulb]
--     -- Peeking the buffer while entering command :{number}  https://github.com/nacro90/numb.nvim
--     {
--         "nacro90/numb.nvim",
--         branch = "master",
--         event = "BufRead",
--         config = function()
--             require("numb").setup {
--                 show_numbers = true, -- Enable 'number' for the window while peeking
--                 show_cursorline = true -- Enable 'cursorline' for the window while peeking
--             }
--         end
--     },
--     -- better quickfix window  https://github.com/kevinhwang91/nvim-bqf
--     {
--         "kevinhwang91/nvim-bqf",
--         branch = "main",
--         event = {"BufRead", "BufNew"},
--         config = function()
--             require("bqf").setup(
--                 {
--                     auto_enable = true,
--                     preview = {
--                         win_height = 12,
--                         win_vheight = 12,
--                         delay_syntax = 80,
--                         border_chars = {"│", "│", "─", "─", "╭", "╮", "╰", "╯", "█"}
--                     },
--                     func_map = {
--                         vsplit = "",
--                         ptogglemode = "z,",
--                         stoggleup = ""
--                     },
--                     filter = {
--                         fzf = {
--                             action_for = {["ctrl-s"] = "split"},
--                             extra_opts = {"--bind", "ctrl-o:toggle-all", "--prompt", "> "}
--                         }
--                     }
--                 }
--             )
--         end
--     },
--     -- Select/yank multiple lines that are not adjacent  [https://github.com/Rasukarusan/nvim-select-multi-line]
--     {
--         "Rasukarusan/nvim-select-multi-line",
--         branch = "master"
--     },
--     -- CosmicNvim UI theme + Code Actions + Rename  [https://github.com/CosmicNvim/cosmic-ui]
--     {
--         "CosmicNvim/cosmic-ui",
--         requires = {"MunifTanjim/nui.nvim", "nvim-lua/plenary.nvim"},
--         branch = "main",
--         config = function()
--             require("cosmic-ui").setup {
--                 -- default border to use
--                 -- 'single', 'double', 'rounded', 'solid', 'shadow'
--                 border = "rounded",
--                 -- rename popup settings
--                 rename = {
--                     prompt = "> ",
--                     -- same as nui popup options
--                     popup_opts = {
--                         position = {
--                             row = 1,
--                             col = 0
--                         },
--                         size = {
--                             width = 25,
--                             height = 2
--                         },
--                         relative = "cursor",
--                         border = {
--                             highlight = "FloatBorder",
--                             style = "rounded", -- _G.CosmicUI_user_opts.border (single)
--                             text = {
--                                 top = " Rename ",
--                                 top_align = "left"
--                             }
--                         },
--                         win_options = {
--                             winhighlight = "Normal:Normal"
--                         }
--                     }
--                 },
--                 code_actions = {
--                     min_width = {},
--                     -- same as nui popup options
--                     popup_opts = {
--                         position = {
--                             row = 1,
--                             col = 0
--                         },
--                         relative = "cursor",
--                         border = {
--                             highlight = "FloatBorder",
--                             style = "rounded", -- _G.CosmicUI_user_opts.border (single)
--                             text = {
--                                 top = "Code Actions",
--                                 top_align = "center"
--                             },
--                             padding = {0, 1}
--                         }
--                     }
--                 }
--             }
--         end
--     },
--     -- previewing native LSP's goto definition calls in floating windows  [https://github.com/rmagatti/goto-preview]
--     {
--         "rmagatti/goto-preview",
--         branch = "main",
--         config = function()
--             require("goto-preview").setup {
--                 width = 120, -- Width of the floating window
--                 height = 25, -- Height of the floating window
--                 default_mappings = false, -- Bind default mappings
--                 debug = false, -- Print debug information
--                 opacity = nil, -- 0-100 opacity level of the floating window where 100 is fully transparent.
--                 post_open_hook = nil -- A function taking two arguments, a buffer and a window to be ran as a hook.
--                 -- You can use "default_mappings = true" setup option
--                 -- Or explicitly set keybindings
--                 -- vim.cmd("nnoremap gpd <cmd>lua require('goto-preview').goto_preview_definition()<CR>")
--                 -- vim.cmd("nnoremap gpi <cmd>lua require('goto-preview').goto_preview_implementation()<CR>")
--                 -- vim.cmd("nnoremap gP <cmd>lua require('goto-preview').close_all_win()<CR>")
--             }
--         end
--     },
--     -- cwd to the project's root directory  [https://github.com/ahmedkhalf/lsp-rooter.nvim]
--     {
--         "ahmedkhalf/lsp-rooter.nvim",
--         branch = "main",
--         event = "BufRead",
--         config = function()
--             require("lsp-rooter").setup()
--         end
--     },
--     -- Hint when you type  [https://github.com/ray-x/lsp_signature.nvim]
--     {
--         "ray-x/lsp_signature.nvim",
--         branch = "master",
--         event = "BufRead",
--         config = function()
--             require "lsp_signature".setup()
--         end
--     },
--     -- A tree like view for symbols [https://github.com/simrat39/symbols-outline.nvim]
--     {
--         "simrat39/symbols-outline.nvim",
--         branch = "master",
--         cmd = "SymbolsOutline"
--     },
--     -- Preview markdown in neovim  [https://github.com/ellisonleao/glow.nvim]
--     -- You must install glow globally
--     -- https://github.com/charmbracelet/glow
--     {
--         "npxbr/glow.nvim",
--         branch = "main",
--         ft = {"markdown"}
--     },
--     -- Preview markdown in the browser  [https://github.com/iamcco/markdown-preview.nvim]
--     {
--         "iamcco/markdown-preview.nvim",
--         branch = "master",
--         run = "cd app && npm install",
--         ft = "markdown",
--         cmd = "MarkdownPreview",
--         config = function()
--             vim.g.mkdp_auto_start = 1
--         end
--     },
--     -- Simple session management  [https://github.com/folke/persistence.nvim]
--     -- [https://github.com/simrat39/rust-tools.nvim]
--     -- Intelligently reopen files at your last edit position  [https://github.com/ethanholz/nvim-lastplace]
--     {
--         "ethanholz/nvim-lastplace",
--         branch = "main",
--         event = "BufRead",
--         config = function()
--             require("nvim-lastplace").setup(
--                 {
--                     lastplace_ignore_buftype = {"quickfix", "nofile", "help"},
--                     lastplace_ignore_filetype = {
--                         "gitcommit",
--                         "gitrebase",
--                         "svn",
--                         "hgcommit"
--                     },
--                     lastplace_open_folds = true
--                 }
--             )
--         end
--     },
--     -- live edit html, css, and javascript  [https://github.com/turbio/bracey.vim]
--     {
--         "turbio/bracey.vim",
--         branch = "master",
--         cmd = {"Bracey", "BracyStop", "BraceyReload", "BraceyEval"},
--         run = "npm install --prefix server"
--     },
--     -- lightweight support for ruby bundler  [https://github.com/tpope/vim-bundler]
--     {
--         "tpope/vim-bundler",
--         branch = "master",
--         cmd = {"Bundler", "Bopen", "Bsplit", "Btabedit"}
--     },
--     -- edit ruby on rails applications  [https://github.com/tpope/vim-rails]
--     {
--         "tpope/vim-rails",
--         branch = "master",
--         cmd = {
--             "Eview",
--             "Econtroller",
--             "Emodel",
--             "Smodel",
--             "Sview",
--             "Scontroller",
--             "Vmodel",
--             "Vview",
--             "Vcontroller",
--             "Tmodel",
--             "Tview",
--             "Tcontroller",
--             "Rails",
--             "Generate",
--             "Runner",
--             "Extract"
--         }
--     },
--     -- Underlines the word under the cursor  [https://github.com/itchyny/vim-cursorword]
--     {
--         "itchyny/vim-cursorword",
--         branch = "master",
--         event = {"BufEnter", "BufNewFile"},
--         config = function()
--             vim.api.nvim_command("augroup user_plugin_cursorword")
--             vim.api.nvim_command("autocmd!")
--             vim.api.nvim_command(
--                 "autocmd FileType NvimTree,lspsagafinder,dashboard,vista let b:cursorword = 0"
--             )
--             vim.api.nvim_command(
--                 "autocmd WinEnter * if &diff || &pvw | let b:cursorword = 0 | endif"
--             )
--             vim.api.nvim_command("autocmd InsertEnter * let b:cursorword = 0")
--             vim.api.nvim_command("autocmd InsertLeave * let b:cursorword = 1")
--             vim.api.nvim_command("augroup END")
--         end
--     }
-- }
-- return plugins
